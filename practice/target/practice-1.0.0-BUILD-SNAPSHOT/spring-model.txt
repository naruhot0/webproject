[스프링 특징]

-MVC 패턴 채택
-cf) OOP 패턴, 디자인 패턴 (싱글톤,빌더,팩토리,MVC)


Model1
- Client -- JSP (+DB 연결, 데이터 저장) -- DB
*하나의 JSP파일 안에서 DB연결 (-MGR), 데이터 저장
*자바코드 <% %>랑 html이 존재

Model2 == MVC (Model-view-controller)
*model (-Mgr (DAO) -> Bean)
*Controller (servlet)
*view (.jsp)

.jsp(view) -> servlet(servlet) -> mgr(model) -> DB

[MVC 구조를 채택한 Spring 구조]

cf)

-구성요소
	- DispatcherServlet(**) : 중간 관리자 역할
		: Client의 request에 맞게 컨트롤러가 실행한 결과를 View 전달해서 응답을 생성
		: ex) localhost:8000/overview/
	- HandlerMapping
		: Clinet의 request url을 확인해서 컨트롤러 결정
	- Controller : client의 요청을 처리해서 DispatherServelet에게 리턴
		: ex) home() (RequestMapping="/")
	- ModelAndView / model : controller가 처리한 model / view 정보를 담음
		: ex) model.addAttribute("serverTime",...);
	- ViewResolver : controller의 처리 결과를 생성할 뷰 결정
		: ex) prefix + home.jsp + suffix
	- View : controller 의 처리 결과 화면 생성 (.jsp)
		: ex) home.jsp
		
		
		
[Java Bean]

presentation (view) layer <-> business layer <-> persistence (DB) layer
		VO						DTO						Entity
(*) Entity : DB 구조와 1:1 맴핑 객체
	ex) date: 2022-02-25 (Date 타입으로 DB에 저장) => String: "2022-02-25"
	
(*) DAO: DB에 SQL을 수행하기 위한 객체 (ex) new dao().select())	
	
(*)	DTO : DB 구조와 거의 비슷하지만 변경될 가능성이 있는 객체
	ex) String: "2022-02-25" => parsing => int: 2022,int :2 , int: 25
	
(*) VO : View에 보여지는 객체 (read only, 변경 불가)	
		
		